{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","data","className","alt","src","id","name","email","CardList","dataList","map","monster","index","key","SearchBox","type","placeholder","handleOnChange","onChange","App","state","monsters","searchField","componentDidMount","a","getMonsters","setState","fetch","json","handleChange","e","target","value","toLowerCase","this","filteredMonsters","filter","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+WAGaA,G,kBAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACI,yBAAKC,UAAU,kBACX,gCACI,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAKI,GAA/B,6BAE1B,4BAAKJ,EAAKK,MACV,2BAAIL,EAAKM,UCNRC,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OACI,yBAAKP,UAAU,aACVO,EAASC,IAAI,SAACC,EAASC,GAAV,OACV,kBAAC,EAAD,CAAMC,IAAKD,EAAOX,KAAMU,QCL3BG,G,MAAY,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eAC3C,OACI,2BAAOf,UAAU,SAASa,KAAMA,EAAMC,YAAaA,EAAaE,SAAUD,MC0CnEE,E,2MAzCXC,MAAQ,CACJC,SAAU,GACVC,YAAa,I,EAGjBC,kB,qBAAoB,4BAAAC,EAAA,qEACO,EAAKC,cADZ,OACVJ,EADU,OAEhB,EAAKK,SAAS,CAAEL,aAFA,yC,EAKpBI,Y,qBAAc,4BAAAD,EAAA,qEACWG,MAAM,8CADjB,cACNN,EADM,yBAEHA,EAASO,QAFN,yC,EAKdC,aAAe,SAAAC,GACX,EAAKJ,SAAS,CAAEJ,YAAaQ,EAAEC,OAAOC,MAAMC,iB,wEAGtC,IAAD,EAC6BC,KAAKd,MAA/BC,EADH,EACGA,SAAUC,EADb,EACaA,YACZa,EAAmBd,EAASe,OAAO,SAAAzB,GAAO,OAC5CA,EAAQL,KAAK2B,cAAcI,SAASf,KAGxC,OACI,yBAAKpB,UAAU,OACX,gCACI,gDACA,kBAAC,EAAD,CACIa,KAAK,SACLC,YAAY,kBACZC,eAAgBiB,KAAKL,gBAG7B,kBAAC,EAAD,CAAUpB,SAAU0B,S,GApClBG,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3045801d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = ({ data }) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <center>\r\n                <img alt=\"monster\" src={`https://robohash.org/${data.id}?set=set2&size=180x180`} />\r\n            </center>\r\n            <h2>{data.name}</h2>\r\n            <p>{data.email}</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from './../card/card.component';\r\n\r\nexport const CardList = ({ dataList }) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {dataList.map((monster, index) => (\r\n                <Card key={index} data={monster} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ type, placeholder, handleOnChange }) => {\r\n    return (\r\n        <input className=\"search\" type={type} placeholder={placeholder} onChange={handleOnChange} />\r\n    );\r\n};\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n    state = {\n        monsters: [],\n        searchField: ''\n    };\n\n    componentDidMount = async () => {\n        const monsters = await this.getMonsters();\n        this.setState({ monsters });\n    };\n\n    getMonsters = async () => {\n        let monsters = await fetch('https://jsonplaceholder.typicode.com/users');\n        return monsters.json();\n    };\n\n    handleChange = e => {\n        this.setState({ searchField: e.target.value.toLowerCase() });\n    };\n\n    render() {\n        const { monsters, searchField } = this.state;\n        const filteredMonsters = monsters.filter(monster =>\n            monster.name.toLowerCase().includes(searchField)\n        );\n\n        return (\n            <div className=\"App\">\n                <center>\n                    <h1>Monsters Rolodex</h1>\n                    <SearchBox\n                        type=\"search\"\n                        placeholder=\"Search Monsters\"\n                        handleOnChange={this.handleChange}\n                    />\n                </center>\n                <CardList dataList={filteredMonsters}></CardList>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}